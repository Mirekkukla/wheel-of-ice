###################################################################################################
#### Replace the default Nginx config file. The new config has nginx respond to HTTP requests with
#### a 301 redirect... EXCEPT for ELP health check requests, which require HTTP.
#### (Recal that we have iptables re-routing port to 8080, so HTTP "comes in" on 8080).
####
#### Additionally, we now support HTTPS with our own letsencrypt-generated certs.
####
#### Based on https://github.com/awsdocs/elastic-beanstalk-samples/blob/master/configuration-files/aws-provided/security-configuration/https-redirect/nodejs/https-redirect-nodejs.config
#### As well as https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/https-singleinstance-nodejs.html
###################################################################################################

files:
  /etc/nginx/conf.d/proxy.conf:
    owner: root
    group: root
    mode: "000644"
    content: |
      # Elastic Beanstalk Managed
      #
      # The default file has been modified to support HTTP -> HTTPS redirects,
      # and extended to listen on port 443 and support SSL/TSL connections

      upstream nodejs {
          server 127.0.0.1:8081;
          keepalive 256;
      }

      server {
          listen 8080;

          if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
              set $year $1;
              set $month $2;
              set $day $3;
              set $hour $4;
          }
          access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
          access_log  /var/log/nginx/access.log  main;

          location / {
              # NEW HTTP -> HTTPS CHANGES START
              set $redirect 0;
              if ($http_x_forwarded_proto != "https") {
                set $redirect 1;
              }
              if ($http_user_agent ~* "ELB-HealthChecker") {
                set $redirect 0;
              }
              if ($redirect = 1) {
                return 301 https://$host$request_uri;
              }
              # NEW HTTP -> HTTPS CHANGES END

              proxy_pass  http://nodejs;
              proxy_set_header   Connection "";
              proxy_http_version 1.1;
              proxy_set_header        Host            $host;
              proxy_set_header        X-Real-IP       $remote_addr;
              proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          }

          gzip on;
          gzip_comp_level 4;
          gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
      }

      server {
          listen       443;

          ssl                  on;
          ssl_certificate      /etc/letsencrypt/live/www.wheelofice.com/fullchain.pem;
          ssl_certificate_key  /etc/letsencrypt/live/www.wheelofice.com/privkey.pem;

          ssl_session_timeout  5m;

          ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
          ssl_prefer_server_ciphers   on;

          if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
              set $year $1;
              set $month $2;
              set $day $3;
              set $hour $4;
          }
          access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
          access_log  /var/log/nginx/access.log  main;

          location / {
              proxy_pass  http://nodejs;
              proxy_set_header   Connection "";
              proxy_http_version 1.1;
              proxy_set_header        Host            $host;
              proxy_set_header        X-Real-IP       $remote_addr;
              proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header        X-Forwarded-Proto https;
          }
      }

  /opt/elasticbeanstalk/hooks/configdeploy/post/98_install_cert.sh:
    owner: root
    group: root
    mode: "000755"
    content: |
      #!/bin/bash -xe
      CERTBOT_PATH=/usr/local/bin/certbot-auto

      # do nothing it its already present
      if test -f "$CERTBOT_PATH"; then
        echo "$CERTBOT_PATH already exists, skipping installation"
        exit 0
      fi

      echo "Installing certbot"

      # otherwise install it and setup an auto-renew cron job
      wget https://dl.eff.org/certbot-auto
      mv certbot-auto $CERTBOT_PATH
      chmod 0755 $CERTBOT_PATH

      # kill nginx
      sudo initctl stop nginx || echo "nginx already down"

      # backup and nuke iptables rules
      iptables-save > iptables_bckp
      iptables -t nat -F

      # run cerbot using certbots webserver
       sudo $CERTBOT_PATH certonly --standalone -n --agree-tos -m mirekkukla@gmail.com -dwww.wheelofice.com

      # restore iptables rules
      iptables-restore < iptables_bckp

      # spin up nginx
      sudo initctl start nginx

  /opt/elasticbeanstalk/hooks/configdeploy/post/99_kill_default_nginx.sh:
    owner: root
    group: root
    mode: "000755"
    content: |
      #!/bin/bash -xe
      rm -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf
      service nginx restart

container_commands:
  removeconfig:
    command: "rm -f /tmp/deployment/config/#etc#nginx#conf.d#00_elastic_beanstalk_proxy.conf /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf"
